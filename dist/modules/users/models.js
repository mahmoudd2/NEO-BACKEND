"use strict";

const db = require('../../config/knex');
const toDb = b => ({
  RoleID: b.roleId,
  CompanyID: b.companyId,
  UserName: b.userName,
  FirstName: b.firstName,
  LastName: b.lastName,
  Email: b.email,
  Password: b.password,
  Language: b.language ?? null,
  status: b.status ?? null
});
const userColumns = ['id', 'RoleID', 'CompanyID', 'UserName', 'FirstName', 'LastName', 'Email', 'Language', 'LastLogin', 'status'];
module.exports = {
  create: async body => {
    const [row] = await db('UserAccount').insert(toDb(body)).returning(userColumns);
    return row;
  },
  list: () => db('UserAccount').select(userColumns).orderBy('id', 'asc'),
  listByCompany: companyId => db('UserAccount').select(userColumns).where({
    CompanyID: companyId
  }).orderBy('id', 'asc'),
  getById: id => db('UserAccount').select(userColumns).where({
    id
  }).first(),
  /** UPDATE: allow only safe fields (no password here) */
  update: async (id, payload) => {
    const safe = {
      ...(payload.roleId !== undefined ? {
        RoleID: payload.roleId
      } : {}),
      ...(payload.companyId !== undefined ? {
        CompanyID: payload.companyId
      } : {}),
      ...(payload.userName !== undefined ? {
        UserName: payload.userName
      } : {}),
      ...(payload.firstName !== undefined ? {
        FirstName: payload.firstName
      } : {}),
      ...(payload.lastName !== undefined ? {
        LastName: payload.lastName
      } : {}),
      ...(payload.email !== undefined ? {
        Email: payload.email
      } : {}),
      ...(payload.language !== undefined ? {
        Language: payload.language
      } : {}),
      ...(payload.status !== undefined ? {
        status: payload.status
      } : {})
    };
    const [row] = await db('UserAccount').where({
      id
    }).update(safe).returning(userColumns);
    return row;
  },
  /** Set a new (already-hashed) password */
  setPassword: async (id, hashedPassword) => {
    await db('UserAccount').where({
      id
    }).update({
      Password: hashedPassword
    });
    return true;
  },
  getEmailById: id => db('UserAccount').select('id', 'Email', 'FirstName').where({
    id
  }).first(),
  remove: id => db('UserAccount').where({
    id
  }).del()
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkYiIsInJlcXVpcmUiLCJ0b0RiIiwiYiIsIlJvbGVJRCIsInJvbGVJZCIsIkNvbXBhbnlJRCIsImNvbXBhbnlJZCIsIlVzZXJOYW1lIiwidXNlck5hbWUiLCJGaXJzdE5hbWUiLCJmaXJzdE5hbWUiLCJMYXN0TmFtZSIsImxhc3ROYW1lIiwiRW1haWwiLCJlbWFpbCIsIlBhc3N3b3JkIiwicGFzc3dvcmQiLCJMYW5ndWFnZSIsImxhbmd1YWdlIiwic3RhdHVzIiwidXNlckNvbHVtbnMiLCJtb2R1bGUiLCJleHBvcnRzIiwiY3JlYXRlIiwiYm9keSIsInJvdyIsImluc2VydCIsInJldHVybmluZyIsImxpc3QiLCJzZWxlY3QiLCJvcmRlckJ5IiwibGlzdEJ5Q29tcGFueSIsIndoZXJlIiwiZ2V0QnlJZCIsImlkIiwiZmlyc3QiLCJ1cGRhdGUiLCJwYXlsb2FkIiwic2FmZSIsInVuZGVmaW5lZCIsInNldFBhc3N3b3JkIiwiaGFzaGVkUGFzc3dvcmQiLCJnZXRFbWFpbEJ5SWQiLCJyZW1vdmUiLCJkZWwiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbW9kdWxlcy91c2Vycy9tb2RlbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZGIgPSByZXF1aXJlKCcuLi8uLi9jb25maWcva25leCcpO1xyXG5cclxuY29uc3QgdG9EYiA9IChiKSA9PiAoe1xyXG4gIFJvbGVJRDogYi5yb2xlSWQsXHJcbiAgQ29tcGFueUlEOiBiLmNvbXBhbnlJZCxcclxuICBVc2VyTmFtZTogYi51c2VyTmFtZSxcclxuICBGaXJzdE5hbWU6IGIuZmlyc3ROYW1lLFxyXG4gIExhc3ROYW1lOiBiLmxhc3ROYW1lLFxyXG4gIEVtYWlsOiBiLmVtYWlsLFxyXG4gIFBhc3N3b3JkOiBiLnBhc3N3b3JkLFxyXG4gIExhbmd1YWdlOiBiLmxhbmd1YWdlID8/IG51bGwsXHJcbiAgc3RhdHVzOiBiLnN0YXR1cyA/PyBudWxsXHJcbn0pO1xyXG5cclxuY29uc3QgdXNlckNvbHVtbnMgPSBbXHJcbiAgJ2lkJywgJ1JvbGVJRCcsICdDb21wYW55SUQnLCAnVXNlck5hbWUnLCAnRmlyc3ROYW1lJywgJ0xhc3ROYW1lJyxcclxuICAnRW1haWwnLCAnTGFuZ3VhZ2UnLCAnTGFzdExvZ2luJywgJ3N0YXR1cydcclxuXTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIGNyZWF0ZTogYXN5bmMgKGJvZHkpID0+IHtcclxuICAgIGNvbnN0IFtyb3ddID0gYXdhaXQgZGIoJ1VzZXJBY2NvdW50JykuaW5zZXJ0KHRvRGIoYm9keSkpLnJldHVybmluZyh1c2VyQ29sdW1ucyk7XHJcbiAgICByZXR1cm4gcm93O1xyXG4gIH0sXHJcblxyXG4gIGxpc3Q6ICgpID0+IGRiKCdVc2VyQWNjb3VudCcpLnNlbGVjdCh1c2VyQ29sdW1ucykub3JkZXJCeSgnaWQnLCAnYXNjJyksXHJcblxyXG4gIGxpc3RCeUNvbXBhbnk6IChjb21wYW55SWQpID0+XHJcbiAgICBkYignVXNlckFjY291bnQnKS5zZWxlY3QodXNlckNvbHVtbnMpLndoZXJlKHsgQ29tcGFueUlEOiBjb21wYW55SWQgfSkub3JkZXJCeSgnaWQnLCAnYXNjJyksXHJcblxyXG4gIGdldEJ5SWQ6IChpZCkgPT5cclxuICAgIGRiKCdVc2VyQWNjb3VudCcpLnNlbGVjdCh1c2VyQ29sdW1ucykud2hlcmUoeyBpZCB9KS5maXJzdCgpLFxyXG5cclxuICAvKiogVVBEQVRFOiBhbGxvdyBvbmx5IHNhZmUgZmllbGRzIChubyBwYXNzd29yZCBoZXJlKSAqL1xyXG4gIHVwZGF0ZTogYXN5bmMgKGlkLCBwYXlsb2FkKSA9PiB7XHJcbiAgICBjb25zdCBzYWZlID0ge1xyXG4gICAgICAuLi4ocGF5bG9hZC5yb2xlSWQgIT09IHVuZGVmaW5lZCA/IHsgUm9sZUlEOiBwYXlsb2FkLnJvbGVJZCB9IDoge30pLFxyXG4gICAgICAuLi4ocGF5bG9hZC5jb21wYW55SWQgIT09IHVuZGVmaW5lZCA/IHsgQ29tcGFueUlEOiBwYXlsb2FkLmNvbXBhbnlJZCB9IDoge30pLFxyXG4gICAgICAuLi4ocGF5bG9hZC51c2VyTmFtZSAhPT0gdW5kZWZpbmVkID8geyBVc2VyTmFtZTogcGF5bG9hZC51c2VyTmFtZSB9IDoge30pLFxyXG4gICAgICAuLi4ocGF5bG9hZC5maXJzdE5hbWUgIT09IHVuZGVmaW5lZCA/IHsgRmlyc3ROYW1lOiBwYXlsb2FkLmZpcnN0TmFtZSB9IDoge30pLFxyXG4gICAgICAuLi4ocGF5bG9hZC5sYXN0TmFtZSAhPT0gdW5kZWZpbmVkID8geyBMYXN0TmFtZTogcGF5bG9hZC5sYXN0TmFtZSB9IDoge30pLFxyXG4gICAgICAuLi4ocGF5bG9hZC5lbWFpbCAhPT0gdW5kZWZpbmVkID8geyBFbWFpbDogcGF5bG9hZC5lbWFpbCB9IDoge30pLFxyXG4gICAgICAuLi4ocGF5bG9hZC5sYW5ndWFnZSAhPT0gdW5kZWZpbmVkID8geyBMYW5ndWFnZTogcGF5bG9hZC5sYW5ndWFnZSB9IDoge30pLFxyXG4gICAgICAuLi4ocGF5bG9hZC5zdGF0dXMgIT09IHVuZGVmaW5lZCA/IHsgc3RhdHVzOiBwYXlsb2FkLnN0YXR1cyB9IDoge30pLFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBbcm93XSA9IGF3YWl0IGRiKCdVc2VyQWNjb3VudCcpXHJcbiAgICAgIC53aGVyZSh7IGlkIH0pXHJcbiAgICAgIC51cGRhdGUoc2FmZSlcclxuICAgICAgLnJldHVybmluZyh1c2VyQ29sdW1ucyk7XHJcblxyXG4gICAgcmV0dXJuIHJvdztcclxuICB9LFxyXG5cclxuICAvKiogU2V0IGEgbmV3IChhbHJlYWR5LWhhc2hlZCkgcGFzc3dvcmQgKi9cclxuICBzZXRQYXNzd29yZDogYXN5bmMgKGlkLCBoYXNoZWRQYXNzd29yZCkgPT4ge1xyXG4gICAgYXdhaXQgZGIoJ1VzZXJBY2NvdW50Jykud2hlcmUoeyBpZCB9KS51cGRhdGUoeyBQYXNzd29yZDogaGFzaGVkUGFzc3dvcmQgfSk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9LFxyXG4gIFxyXG4gIGdldEVtYWlsQnlJZDogKGlkKSA9PlxyXG4gIGRiKCdVc2VyQWNjb3VudCcpLnNlbGVjdCgnaWQnLCdFbWFpbCcsJ0ZpcnN0TmFtZScpLndoZXJlKHsgaWQgfSkuZmlyc3QoKSxcclxuXHJcblxyXG4gIHJlbW92ZTogKGlkKSA9PiBkYignVXNlckFjY291bnQnKS53aGVyZSh7IGlkIH0pLmRlbCgpXHJcbn07XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxFQUFFLEdBQUdDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQztBQUV2QyxNQUFNQyxJQUFJLEdBQUlDLENBQUMsS0FBTTtFQUNuQkMsTUFBTSxFQUFFRCxDQUFDLENBQUNFLE1BQU07RUFDaEJDLFNBQVMsRUFBRUgsQ0FBQyxDQUFDSSxTQUFTO0VBQ3RCQyxRQUFRLEVBQUVMLENBQUMsQ0FBQ00sUUFBUTtFQUNwQkMsU0FBUyxFQUFFUCxDQUFDLENBQUNRLFNBQVM7RUFDdEJDLFFBQVEsRUFBRVQsQ0FBQyxDQUFDVSxRQUFRO0VBQ3BCQyxLQUFLLEVBQUVYLENBQUMsQ0FBQ1ksS0FBSztFQUNkQyxRQUFRLEVBQUViLENBQUMsQ0FBQ2MsUUFBUTtFQUNwQkMsUUFBUSxFQUFFZixDQUFDLENBQUNnQixRQUFRLElBQUksSUFBSTtFQUM1QkMsTUFBTSxFQUFFakIsQ0FBQyxDQUFDaUIsTUFBTSxJQUFJO0FBQ3RCLENBQUMsQ0FBQztBQUVGLE1BQU1DLFdBQVcsR0FBRyxDQUNsQixJQUFJLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFDaEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsUUFBUSxDQUMzQztBQUVEQyxNQUFNLENBQUNDLE9BQU8sR0FBRztFQUNmQyxNQUFNLEVBQUUsTUFBT0MsSUFBSSxJQUFLO0lBQ3RCLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDLEdBQUcsTUFBTTFCLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQzJCLE1BQU0sQ0FBQ3pCLElBQUksQ0FBQ3VCLElBQUksQ0FBQyxDQUFDLENBQUNHLFNB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