"use strict";

const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const repo = require('./models');
exports.login = async (email, password) => {
  const admin = await repo.findAdminByEmail(email);
  if (!admin) return {
    ok: false,
    message: 'Invalid credentials'
  };

  // If your seed stored plain text (for now), swap to: const ok = password === admin.Password;
  const ok = await bcrypt.compare(password, admin.Password);
  if (!ok) return {
    ok: false,
    message: 'Invalid credentials'
  };
  const token = jwt.sign({
    id: admin.id,
    email: admin.Email,
    role: 'admin'
  }, process.env.JWT_SECRET, {
    expiresIn: process.env.JWT_EXPIRES_IN || '1d'
  });
  return {
    ok: true,
    token,
    admin: {
      id: admin.id,
      userName: admin.UserName,
      firstName: admin.FirstName,
      lastName: admin.LastName,
      email: admin.Email
    }
  };
};
exports.dashboard = async () => {
  const [companies, users, warehouses, activity] = await Promise.all([repo.countCompanies(), repo.countUsers(), repo.countWarehouses(), repo.recentActivity()]);
  return {
    kpis: {
      companies,
      users,
      warehouses
    },
    recentActivity: activity
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJiY3J5cHQiLCJyZXF1aXJlIiwiand0IiwicmVwbyIsImV4cG9ydHMiLCJsb2dpbiIsImVtYWlsIiwicGFzc3dvcmQiLCJhZG1pbiIsImZpbmRBZG1pbkJ5RW1haWwiLCJvayIsIm1lc3NhZ2UiLCJjb21wYXJlIiwiUGFzc3dvcmQiLCJ0b2tlbiIsInNpZ24iLCJpZCIsIkVtYWlsIiwicm9sZSIsInByb2Nlc3MiLCJlbnYiLCJKV1RfU0VDUkVUIiwiZXhwaXJlc0luIiwiSldUX0VYUElSRVNfSU4iLCJ1c2VyTmFtZSIsIlVzZXJOYW1lIiwiZmlyc3ROYW1lIiwiRmlyc3ROYW1lIiwibGFzdE5hbWUiLCJMYXN0TmFtZSIsImRhc2hib2FyZCIsImNvbXBhbmllcyIsInVzZXJzIiwid2FyZWhvdXNlcyIsImFjdGl2aXR5IiwiUHJvbWlzZSIsImFsbCIsImNvdW50Q29tcGFuaWVzIiwiY291bnRVc2VycyIsImNvdW50V2FyZWhvdXNlcyIsInJlY2VudEFjdGl2aXR5Iiwia3BpcyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2R1bGVzL2FkbWluL3NlcnZpY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYmNyeXB0ID0gcmVxdWlyZSgnYmNyeXB0anMnKTtcclxuY29uc3Qgand0ID0gcmVxdWlyZSgnanNvbndlYnRva2VuJyk7XHJcbmNvbnN0IHJlcG8gPSByZXF1aXJlKCcuL21vZGVscycpO1xyXG5cclxuZXhwb3J0cy5sb2dpbiA9IGFzeW5jIChlbWFpbCwgcGFzc3dvcmQpID0+IHtcclxuICBjb25zdCBhZG1pbiA9IGF3YWl0IHJlcG8uZmluZEFkbWluQnlFbWFpbChlbWFpbCk7XHJcbiAgaWYgKCFhZG1pbikgcmV0dXJuIHsgb2s6IGZhbHNlLCBtZXNzYWdlOiAnSW52YWxpZCBjcmVkZW50aWFscycgfTtcclxuXHJcbiAgLy8gSWYgeW91ciBzZWVkIHN0b3JlZCBwbGFpbiB0ZXh0IChmb3Igbm93KSwgc3dhcCB0bzogY29uc3Qgb2sgPSBwYXNzd29yZCA9PT0gYWRtaW4uUGFzc3dvcmQ7XHJcbiAgY29uc3Qgb2sgPSBhd2FpdCBiY3J5cHQuY29tcGFyZShwYXNzd29yZCwgYWRtaW4uUGFzc3dvcmQpO1xyXG4gIGlmICghb2spIHJldHVybiB7IG9rOiBmYWxzZSwgbWVzc2FnZTogJ0ludmFsaWQgY3JlZGVudGlhbHMnIH07XHJcblxyXG4gIGNvbnN0IHRva2VuID0gand0LnNpZ24oXHJcbiAgICB7IGlkOiBhZG1pbi5pZCwgZW1haWw6IGFkbWluLkVtYWlsLCByb2xlOiAnYWRtaW4nIH0sXHJcbiAgICBwcm9jZXNzLmVudi5KV1RfU0VDUkVULFxyXG4gICAgeyBleHBpcmVzSW46IHByb2Nlc3MuZW52LkpXVF9FWFBJUkVTX0lOIHx8ICcxZCcgfVxyXG4gICk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBvazogdHJ1ZSxcclxuICAgIHRva2VuLFxyXG4gICAgYWRtaW46IHtcclxuICAgICAgaWQ6IGFkbWluLmlkLFxyXG4gICAgICB1c2VyTmFtZTogYWRtaW4uVXNlck5hbWUsXHJcbiAgICAgIGZpcnN0TmFtZTogYWRtaW4uRmlyc3ROYW1lLFxyXG4gICAgICBsYXN0TmFtZTogYWRtaW4uTGFzdE5hbWUsXHJcbiAgICAgIGVtYWlsOiBhZG1pbi5FbWFpbCxcclxuICAgIH1cclxuICB9O1xyXG59O1xyXG5cclxuZXhwb3J0cy5kYXNoYm9hcmQgPSBhc3luYyAoKSA9PiB7XHJcbiAgY29uc3QgW2NvbXBhbmllcywgdXNlcnMsIHdhcmVob3VzZXMsIGFjdGl2aXR5XSA9IGF3YWl0IFByb21pc2UuYWxsKFtcclxuICAgIHJlcG8uY291bnRDb21wYW5pZXMoKSxcclxuICAgIHJlcG8uY291bnRVc2VycygpLFxyXG4gICAgcmVwby5jb3VudFdhcmVob3VzZXMoKSxcclxuICAgIHJlcG8ucmVjZW50QWN0aXZpdHkoKVxyXG4gIF0pO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAga3BpczogeyBjb21wYW5pZXMsIHVzZXJzLCB3YXJlaG91c2VzIH0sXHJcbiAgICByZWNlbnRBY3Rpdml0eTogYWN0aXZpdHlcclxuICB9O1xyXG59O1xyXG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTUEsTUFBTSxHQUFHQyxPQUFPLENBQUMsVUFBVSxDQUFDO0FBQ2xDLE1BQU1DLEdBQUcsR0FBR0QsT0FBTyxDQUFDLGNBQWMsQ0FBQztBQUNuQyxNQUFNRSxJQUFJLEdBQUdGLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFFaENHLE9BQU8sQ0FBQ0MsS0FBSyxHQUFHLE9BQU9DLEtBQUssRUFBRUMsUUFBUSxLQUFLO0VBQ3pDLE1BQU1DLEtBQUssR0FBRyxNQUFNTCxJQUFJLENBQUNNLGdCQUFnQixDQUFDSCxLQUFLLENBQUM7RUFDaEQsSUFBSSxDQUFDRSxLQUFLLEVBQUUsT0FBTztJQUFFRSxFQUFFLEVBQUUsS0FBSztJQUFFQyxPQUFPLEVBQUU7RUFBc0IsQ0FBQzs7RUFFaEU7RUFDQSxNQUFNRCxFQUFFLEdBQUcsTUFBTVYsTUFBTSxDQUFDWSxPQUFPLENBQUNMLFFBQVEsRUFBRUMsS0FBSyxDQUFDSyxRQUFRLENBQUM7RUFDekQsSUFBSSxDQUFDSCxFQUFFLEVBQUUsT0FBTztJQUFFQSxFQUFFLEVBQUUsS0FBSztJQUFFQyxPQUFPLEVBQUU7RUFBc0IsQ0FBQztFQUU3RCxNQUFNRyxLQUFLLEdBQUdaLEdBQUcsQ0FBQ2EsSUFBSSxDQUNwQjtJQUFFQyxFQUFFLEVBQUVSLEtBQUssQ0FBQ1EsRUFBRTtJQUFFVixLQUFLLEVBQUVFLEtBQUssQ0FBQ1MsS0FBSztJQUFFQyxJQUFJLEVBQUU7RUFBUSxDQUFDLEVBQ25EQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsVUFBVSxFQUN0QjtJQUFFQyxTQUFTLEVBQUVILE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRyxjQUFjLElBQUk7RUFBSyxDQUNsRCxDQUFDO0VBRUQsT0FBTztJQUNMYixFQUFFLEVBQUUsSUFBSTtJQUNSSSxLQUFLO0lBQ0xOLEtBQUssRUFBRTtNQUNMUSxFQUFFLEVBQUVSLEtBQUssQ0FBQ1EsRUFBRTtNQUNaUSxRQUFRLEVBQUVoQixLQUFLLENBQUNpQixRQUFRO01BQ3hCQyxTQUFTLEVBQUVsQixLQUFLLENBQUNtQixTQUFTO01BQzFCQyxRQUFRLEVBQUVwQixLQUFLLENBQUNxQixRQUFRO01BQ3hCdkIsS0FBSyxFQUFFRSxLQUFLLENBQUNTO0lBQ2Y7RUFDRixDQUFDO0FBQ0gsQ0FBQztBQUVEYixPQUFPLENBQUMwQixTQUFTLEdBQUcsWUFBWTtFQUM5QixNQUFNLENBQUNDLFNBQVMsRUFBRUMsS0FBSyxFQUFFQyxVQUFVLEVBQUVDLFFBQVEsQ0FBQyxHQUFHLE1BQU1DLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLENBQ2pFakMsSUFBSSxDQUFDa0MsY0FBYyxDQUFDLENBQUMsRUFDckJsQyxJQUFJLENBQUNtQyxVQUFVLENBQUMsQ0FBQyxFQUNqQm5DLElBQUksQ0FBQ29DLGVBQWUsQ0FBQyxDQUFDLEVBQ3RCcEMsSUFBSSxDQUFDcUMsY0FBYyxDQUFDLENBQUMsQ0FDdEIsQ0FBQztFQUVGLE9BQU87SUFDTEMsSUFBSSxFQUFFO01BQUVWLFNBQVM7TUFBRUMsS0FBSztNQUFFQztJQUFXLENBQUM7SUFDdENPLGNBQWMsRUFBRU47RUFDbEIsQ0FBQztBQUNILENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=